import os
import json
import random
import logging
import asyncio
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv
from PIL import Image, ImageDraw
import threading
from flask import Flask

app = Flask(__name__)

@app.route('/')
def home():
    return "üîÆ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –í–µ—Ä—Å–∏—è 2.0", 200

@app.route('/health')
def health_check():
    return "OK", 200

def run():
    app.run(host='0.0.0.0', port=8080)

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run, daemon=True).start()

# –ò–º–ø–æ—Ä—Ç –¥–ª—è Telegram
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler
)
from openai import OpenAI

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
HEXAGRAMS_FILE = "hexagrams.json"
STOP_WORDS_FILE = "stop_words.json"
INTERPRETATIONS_FILE = "interpretations.json"
RATINGS_FILE = "ratings.json"
USER_SESSIONS_FILE = "user_sessions.txt"
ERROR_LOG_FILE = "error.txt"
GPT_MODEL = "gpt-4.1-mini"
ADMIN_ID = 774452314

# –í–µ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏–Ω–∏–π
WEIGHTS = {
    "–Ø–Ω–°—Ç–∞—Ä—ã–π": 16,
    "–ò–Ω—å–°—Ç–∞—Ä—ã–π": 6,
    "–Ø–Ω": 39,
    "–ò–Ω—å": 39
}

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('PROXY_API_KEY')

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_TOKEN –∏ OPENAI_API_KEY –≤ .env")

try:
    client = OpenAI(
        api_key=os.getenv("PROXY_API_KEY"),
        base_url="https://api.proxyapi.ru/openai/v1"
    )
except Exception as e:
    with open(ERROR_LOG_FILE, 'a', encoding='utf-8') as f:
        f.write(f"{datetime.now().isoformat()} - –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {str(e)}\n")
    raise

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
FORMULATE_PROBLEM, CONFIRM_QUESTION, HEXAGRAM_INTERPRETATION = range(3)

def load_json_data(filename):
    try:
        file_path = Path(__file__).parent / filename
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            if filename == HEXAGRAMS_FILE:
                return {int(k): v for k, v in data.items()}
            return data
    except Exception as e:
        with open(ERROR_LOG_FILE, 'a', encoding='utf-8') as f:
            f.write(f"{datetime.now().isoformat()} - –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {str(e)}\n")
        return {}

HEXAGRAMS = load_json_data(HEXAGRAMS_FILE)
STOP_WORDS_DATA = load_json_data(STOP_WORDS_FILE)
INTERPRETATIONS = load_json_data(INTERPRETATIONS_FILE)

async def log_user_action(user_id: int, username: str, full_name: str, action: str, details: str = ""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with open(USER_SESSIONS_FILE, 'a', encoding='utf-8') as f:
            log_entry = {
                'timestamp': datetime.now().isoformat(),
                'user_id': user_id,
                'username': username,
                'full_name': full_name,
                'action': action,
                'details': details
            }
            f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
    except Exception as e:
        with open(ERROR_LOG_FILE, 'a', encoding='utf-8') as f:
            f.write(f"{datetime.now().isoformat()} - –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {USER_SESSIONS_FILE}: {str(e)}\n")

async def log_error(error_message: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    try:
        with open(ERROR_LOG_FILE, 'a', encoding='utf-8') as f:
            f.write(f"{datetime.now().isoformat()} - {error_message}\n")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

def contains_stop_words(text: str) -> bool:
    text_lower = text.lower()
    return any(word in text_lower for word in STOP_WORDS_DATA.get("words", []))

def get_stop_word_response() -> str:
    return random.choice(STOP_WORDS_DATA.get("responses", ["–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å"]))

def generate_hexagram():
    lines = [
        random.choices(list(WEIGHTS.keys()), weights=list(WEIGHTS.values()), k=1)[0]
        for _ in range(6)
    ]
    binary = ''.join(['1' if x in ['–Ø–Ω', '–Ø–Ω–°—Ç–∞—Ä—ã–π'] else '0' for x in reversed(lines)])
    number = int(binary, 2) + 1
    changing_lines = [i for i, line in enumerate(lines, 1) if "–°—Ç–∞—Ä—ã–π" in line]
    return number, changing_lines, lines

def main_menu():
    return ReplyKeyboardMarkup(
        [["–ü–æ–º–æ—á—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å", "–ì–æ—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –ò-–¶–∑–∏–Ω"], 
         ["–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã", "English version ‚û°Ô∏è"],
         ["–°—Ç–∞—Ä—Ç", "–í—ã–π—Ç–∏", "–ò–Ω—Ñ–æ"]],
        resize_keyboard=True
    )

def cancel_menu():
    return ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

def confirmation_menu():
    return ReplyKeyboardMarkup([["1. –î–∞", "2. –£—Ç–æ—á–Ω–∏—Ç—å"], ["3. –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"]], resize_keyboard=True)

def interpretation_menu():
    return ReplyKeyboardMarkup([["–ö—Ä–∞—Ç–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ", "–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ"], ["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

def context_menu():
    return ReplyKeyboardMarkup([
        ["üíë –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–µ—Ç–∏"],
        ["üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üßò –ó–¥–æ—Ä–æ–≤—å–µ"],
        ["üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "üèõ –ë–∏–∑–Ω–µ—Å"],
        ["üîÆ –û–±—â–µ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ"]
    ], resize_keyboard=True, one_time_keyboard=True) 

async def draw_changing_lines(number: int, changing_lines: list, user_id: int):
    image_path = Path(__file__).parent / "gg" / f"{number}.png"
    if not image_path.exists():
        await log_error(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None

    try:
        img = Image.open(image_path).convert("RGB")
        draw = ImageDraw.Draw(img)
        width, height = img.size
        line_spacing = height / 6

        for line_number in changing_lines:
            y = height - (line_number - 0.7) * line_spacing
            x = width * 0.93
            radius = 3
            draw.ellipse(
                (x - radius, y - radius, x + radius, y + radius),
                fill="red"
            )

        temp_path = Path(__file__).parent / "temp" / f"{number}_{user_id}.png"
        temp_path.parent.mkdir(exist_ok=True)
        img.save(temp_path)
        return temp_path
    except Exception as e:
        await log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã ‚Ññ{number}: {str(e)}")
        return None

async def send_hexagram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback)
    if update.callback_query:
        message = update.callback_query.message
        user = update.callback_query.from_user
    else:
        message = update.message
        user = update.effective_user

    number, changing_lines, lines = generate_hexagram()
    hex_data = HEXAGRAMS.get(number, ["", f"–ì–µ–∫—Å–∞–≥—Ä–∞–º–º–∞ ‚Ññ{number}"])
    hex_name = hex_data[1]

    await log_user_action(
        user.id, 
        user.username, 
        user.full_name, 
        "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã",
        f"–ù–æ–º–µ—Ä: {number}, –ù–∞–∑–≤–∞–Ω–∏–µ: {hex_name}, –ò–∑–º–µ–Ω—è—é—â–∏–µ—Å—è –ª–∏–Ω–∏–∏: {changing_lines}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    temp_path = await draw_changing_lines(number, changing_lines, user.id)
    if temp_path:
        try:
            await message.reply_photo(photo=open(temp_path, 'rb'))
        finally:
            temp_path.unlink()
    else:
        await message.reply_text(f"–ì–µ–∫—Å–∞–≥—Ä–∞–º–º–∞ ‚Ññ{number}")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    response = f"üîÆ {number} ‚Äî {hex_name} ({hex_data[0]})"

    if changing_lines:
        response += f"\n\n‚ôªÔ∏è –°—Ç–∞—Ä—ã–µ –ª–∏–Ω–∏–∏: {', '.join(map(str, changing_lines))}"

    if str(number) in INTERPRETATIONS:
        selected = random.choice(INTERPRETATIONS[str(number)])
        response += f"\n\nüí¨ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç: {selected}"

    await message.reply_text(response)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    context.user_data["question_count"] = 0
    context.user_data["divination_count"] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await log_user_action(user.id, user.username, user.full_name, "–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏")
    await update.message.reply_text(
        f"üîÆ –ü—Ä–∏–≤–µ—Ç, {user.full_name}! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –î–∞–æ-–±–æ—Ç. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –¥–∞—Ç—å —Å–æ–≤–µ—Ç –∏–ª–∏ –¥–∞–∂–µ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –±—É–¥—É—â–µ–µ. –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –ø–æ—á–∏—Ç–∞–π –ò–Ω—Ñ–æ.",
        reply_markup=main_menu()
    )

async def exit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await log_user_action(user.id, user.username, user.full_name, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏")
    await update.message.reply_text(
        "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await log_user_action(user.id, user.username, user.full_name, "–ü–∞—É–∑–∞ —Å–µ—Å—Å–∏–∏")
    await update.message.reply_text(
        "–°–µ—Å—Å–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ä—Ç' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=main_menu()
    )

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("üö∑ –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    try:
        with open(RATINGS_FILE, 'r', encoding='utf-8') as f:
            ratings = [json.loads(line) for line in f if line.strip()]

        if not ratings:
            await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        good = sum(1 for r in ratings if r["rate"] == "good")
        bad = sum(1 for r in ratings if r["rate"] == "bad")
        total = good + bad

        await update.message.reply_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ü–µ–Ω–æ–∫:\n\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len({r['user_id'] for r in ratings})}\n"
            f"‚Ä¢ üëç –•–æ—Ä–æ—à–æ: {good}\n"
            f"‚Ä¢ üëé –ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ: {bad}\n"
            f"‚Ä¢ üìà % –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö: {good/total*100:.1f}%"
        )
    except Exception as e:
        await log_error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

async def send_advice_with_rating(update: Update, text: str, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["last_advice"] = text
    await update.message.reply_text(
        f"{text}\n\n_–û—Ü–µ–Ω–∏—Ç–µ —Å–æ–≤–µ—Ç:_",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üëç –•–æ—Ä–æ—à–æ", callback_data="rate_good"),
             InlineKeyboardButton("üëé –ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ", callback_data="rate_bad")]
        ]),
        parse_mode="Markdown"
    )

async def handle_interpretation_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_choice = update.message.text
    context.user_data["interpretation_type"] = user_choice

    if user_choice == "–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è:",
            reply_markup=context_menu()
        )
        return HEXAGRAM_INTERPRETATION
    else:
        return await generate_hexagram_interpretation(update, context)

    # —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞  
async def handle_context_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["interpretation_context"] = update.message.text
    return await generate_hexagram_interpretation(update, context)      

async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    rate = query.data.replace("rate_", "")

    rating_data = {
        "time": datetime.now().isoformat(),
        "user_id": user.id,
        "username": user.username,
        "full_name": user.full_name,
        "advice": context.user_data.get("last_advice", "?"),
        "rate": rate
    }

    try:
        with open(RATINGS_FILE, 'a', encoding='utf-8') as f:
            f.write(json.dumps(rating_data, ensure_ascii=False) + "\n")

        await query.message.edit_reply_markup(reply_markup=None)
        await query.message.reply_text(f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!", reply_markup=main_menu())
    except Exception as e:
        await log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏: {str(e)}")

async def ready_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await log_user_action(user.id, user.username, user.full_name, "–ù–∞—á–∞–ª–æ –≥–æ—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å:",
        reply_markup=cancel_menu()
    )
    return FORMULATE_PROBLEM

async def process_ready_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_text = update.message.text

    if user_text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await log_user_action(user.id, user.username, user.full_name, "–û—Ç–º–µ–Ω–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return ConversationHandler.END

    if contains_stop_words(user_text):
        await log_user_action(user.id, user.username, user.full_name, "–°—Ç–æ–ø-—Å–ª–æ–≤–∞ –≤ –≥–æ—Ç–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ")
        response = get_stop_word_response()
        await update.message.reply_text(response, reply_markup=main_menu())
        return ConversationHandler.END

    await log_user_action(user.id, user.username, user.full_name, "–ì–æ—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", user_text)
    advice = await generate_advice(user_text, context)
    await send_advice_with_rating(update, f"üîÆ –î–∞–æ-–±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç:\n\n{advice}", context)
    return ConversationHandler.END

async def start_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    context.user_data["user_name"] = user.full_name
    await log_user_action(user.id, user.username, user.full_name, "–ù–∞—á–∞–ª–æ –ø–æ–º–æ—â–∏ –≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ")
    await update.message.reply_text(
        "–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º:",
        reply_markup=cancel_menu()
    )
    return FORMULATE_PROBLEM

async def formulate_problem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    if update.message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await log_user_action(user.id, user.username, user.full_name, "–û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏")
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return ConversationHandler.END

    problem_text = update.message.text

    if contains_stop_words(problem_text):
        await log_user_action(user.id, user.username, user.full_name, "–°—Ç–æ–ø-—Å–ª–æ–≤–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ")
        response = get_stop_word_response()
        await update.message.reply_text(response, reply_markup=main_menu())
        return ConversationHandler.END

    await log_user_action(user.id, user.username, user.full_name, "–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã", problem_text)
    context.user_data["problem"] = problem_text

    try:
        question = await generate_clear_question(problem_text)
        context.user_data["current_question"] = question
        await update.message.reply_text(
            f"üîç –¢—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É:\n\n¬´{question}¬ª\n\n"
            "1. –î–∞, –≤–µ—Ä–Ω–æ\n2. –ù–µ—Ç, —É—Ç–æ—á–Ω–∏—Ç—å\n3. –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç",
            reply_markup=confirmation_menu()
        )
        return CONFIRM_QUESTION
    except Exception as e:
        await log_error(f"–û—à–∏–±–∫–∞ –≤ formulate_problem: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", reply_markup=main_menu())
        return ConversationHandler.END

async def generate_clear_question(text: str) -> str:
    try:
        response = client.chat.completions.create(
            model=GPT_MODEL,
            messages=[
                {"role": "system", "content": "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ —á–µ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å"},
                {"role": "user", "content": text}
            ],
            temperature=0.3,
            max_tokens=50
        )
        return response.choices[0].message.content.strip('"')
    except Exception as e:
        await log_error(f"–û—à–∏–±–∫–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
        return text

async def confirm_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_text = update.message.text
    question = context.user_data.get("current_question", "")

    if context.user_data.get("waiting_for_custom_question", False):
        if contains_stop_words(user_text):
            await log_user_action(user.id, user.username, user.full_name, "–°—Ç–æ–ø-—Å–ª–æ–≤–∞ –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ")
            response = get_stop_word_response()
            await update.message.reply_text(response, reply_markup=main_menu())
            context.user_data.pop("waiting_for_custom_question", None)
            return ConversationHandler.END

        context.user_data["current_question"] = user_text
        advice = await generate_advice(user_text, context)
        await send_advice_with_rating(update, f"üîÆ –î–∞–æ-–±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç:\n\n{advice}", context)
        context.user_data.pop("waiting_for_custom_question", None)
        return ConversationHandler.END

    if user_text.startswith(("1", "–î–∞")):
        await log_user_action(user.id, user.username, user.full_name, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", question)
        advice = await generate_advice(question, context)
        await send_advice_with_rating(update, f"üîÆ –î–∞–æ-–±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç:\n\n{advice}", context)
        return ConversationHandler.END
    elif user_text.startswith(("2", "–£—Ç–æ—á–Ω–∏—Ç—å")):
        await log_user_action(user.id, user.username, user.full_name, "–ó–∞–ø—Ä–æ—Å —É—Ç–æ—á–Ω–µ–Ω–∏—è")
        await update.message.reply_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ:", reply_markup=cancel_menu())
        return FORMULATE_PROBLEM
    elif user_text.startswith(("3", "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")):
        await log_user_action(user.id, user.username, user.full_name, "–ó–∞–ø—Ä–æ—Å —Å–≤–æ–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=cancel_menu())
        context.user_data["waiting_for_custom_question"] = True
        return CONFIRM_QUESTION

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n"
        "1. –î–∞, –≤–µ—Ä–Ω–æ\n2. –ù–µ—Ç, —É—Ç–æ—á–Ω–∏—Ç—å\n3. –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç",
        reply_markup=confirmation_menu()
    )
    return CONFIRM_QUESTION

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await log_user_action(user.id, user.username, user.full_name, "–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è")
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
    return ConversationHandler.END

async def timeout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await log_user_action(user.id, user.username, user.full_name, "–¢–∞–π–º-–∞—É—Ç –¥–∏–∞–ª–æ–≥–∞")
    context.user_data.clear()
    await update.message.reply_text(
        "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏ '–°—Ç–∞—Ä—Ç'.",
        reply_markup=main_menu()
    )
    return ConversationHandler.END

async def divination_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if "divination_count" not in context.user_data:
        context.user_data["divination_count"] = 0

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    context.user_data["divination_count"] += 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 3-–µ –Ω–∞–∂–∞—Ç–∏–µ
    if context.user_data["divination_count"] == 3:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
        reply_markup = ReplyKeyboardMarkup(
            [["–î–∞", "–ù–µ—Ç"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await update.message.reply_text(
            "–í—ã —Å–æ–±—Ä–∞–ª–∏—Å—å —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –º—ã—Å–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ò-–¶–∑–∏–Ω. –£–≤–µ—Ä–µ–Ω—ã?",
            reply_markup=reply_markup
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        context.user_data["awaiting_confirmation"] = True
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏–ª–∏ —ç—Ç–æ –Ω–µ 3-–π —Ä–∞–∑
    if context.user_data.get("awaiting_confirmation", False):
        user_choice = update.message.text.lower()
        if user_choice == "–Ω–µ—Ç":
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –º—É–¥—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
                reply_markup=main_menu()
            )
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data["divination_count"] = 0
            context.user_data.pop("awaiting_confirmation", None)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ (—ç–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ "–°—Ç–∞—Ä—Ç")
            await start_command(update, context)
            return
        elif user_choice == "–¥–∞":
            context.user_data.pop("awaiting_confirmation", None)
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã
    await send_hexagram(update, context)

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        info_path = Path(__file__).parent / "info.txt"
        with open(info_path, 'r', encoding='utf-8') as f:
            info_text = f.read()
        await update.message.reply_text(info_text, reply_markup=main_menu())
        await log_user_action(update.effective_user.id, update.effective_user.username, 
                            update.effective_user.full_name, "–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    except Exception as e:
        await log_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è info.txt: {str(e)}")
        await update.message.reply_text(
            "–î–∞–æ-–±–æ—Ç –º–æ–∂–µ—Ç:\n1) –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã –ò-–¶–∑–∏–Ω\n2) –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò",
            reply_markup=main_menu()
        )

async def start_hexagram_interpretation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await log_user_action(user.id, user.username, user.full_name, "–ù–∞—á–∞–ª–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã")
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã –∏ –∏–∑–º–µ–Ω—è—é—â–∏–µ—Å—è –ª–∏–Ω–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 43.1,2 –∏–ª–∏ 22\n\n"
        "–ì–¥–µ 43 - –Ω–æ–º–µ—Ä –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã, –∞ 1,2 - –∏–∑–º–µ–Ω—è—é—â–∏–µ—Å—è –ª–∏–Ω–∏–∏",
        reply_markup=cancel_menu()
    )
    return HEXAGRAM_INTERPRETATION

async def process_hexagram_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_input = update.message.text.strip()

    if user_input.lower() == "–æ—Ç–º–µ–Ω–∞":
        await log_user_action(user.id, user.username, user.full_name, "–û—Ç–º–µ–Ω–∞ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã")
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return ConversationHandler.END

    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if '.' in user_input:
            parts = user_input.split('.')
            hex_number = int(parts[0].strip())
            changing_lines = [int(x.strip()) for x in parts[1].split(',')] if len(parts) > 1 and parts[1] else []
        else:
            hex_number = int(user_input)
            changing_lines = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã
        if hex_number < 1 or hex_number > 64:
            raise ValueError("–ù–æ–º–µ—Ä –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 64")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –ª–∏–Ω–∏–π
        for line in changing_lines:
            if line < 1 or line > 6:
                raise ValueError("–ù–æ–º–µ—Ä–∞ –ª–∏–Ω–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 6")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["hex_number"] = hex_number
        context.user_data["changing_lines"] = changing_lines

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã
        hex_data = HEXAGRAMS.get(hex_number, ["", f"–ì–µ–∫—Å–∞–≥—Ä–∞–º–º–∞ ‚Ññ{hex_number}"])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        response = f"üîÆ –ì–µ–∫—Å–∞–≥—Ä–∞–º–º–∞ {hex_number} ‚Äî {hex_data[1]} ({hex_data[0]})"
        if changing_lines:
            response += f"\n\n‚ôªÔ∏è –ò–∑–º–µ–Ω—è—é—â–∏–µ—Å—è –ª–∏–Ω–∏–∏: {', '.join(map(str, changing_lines))}"

        response += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è:"

        await update.message.reply_text(response, reply_markup=interpretation_menu())
        return HEXAGRAM_INTERPRETATION

    except ValueError as e:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {str(e)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n43.1,2 –∏–ª–∏ 22",
            reply_markup=cancel_menu()
        )
        return HEXAGRAM_INTERPRETATION
    except Exception as e:
        await log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=cancel_menu()
        )
        return HEXAGRAM_INTERPRETATION

    except ValueError as e:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {str(e)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n43.1,2 –∏–ª–∏ 22",
            reply_markup=cancel_menu()
        )
        return HEXAGRAM_INTERPRETATION
    except Exception as e:
        await log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=cancel_menu()
        )
        return HEXAGRAM_INTERPRETATION

async def generate_hexagram_interpretation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    hex_number = context.user_data["hex_number"]
    changing_lines = context.user_data.get("changing_lines", [])
    hex_data = HEXAGRAMS.get(hex_number, ["", f"–ì–µ–∫—Å–∞–≥—Ä–∞–º–º–∞ ‚Ññ{hex_number}"])
    interpretation_type = context.user_data.get("interpretation_type", "–ö—Ä–∞—Ç–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ")

    try:
        if interpretation_type == "–ö—Ä–∞—Ç–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ":
            prompt = f"–î–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã {hex_number} '{hex_data[1]}'"
            if changing_lines:
                prompt += f" —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω—è—é—â–∏—Ö—Å—è –ª–∏–Ω–∏–π: {', '.join(map(str, changing_lines))}"
            prompt += ". –ë—É–¥—å—Ç–µ –ª–∞–∫–æ–Ω–∏—á–Ω—ã."
            max_tokens = 100
        else:
            context_type = context.user_data.get("interpretation_context", "üîÆ –û–±—â–µ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ")
            context_prompts = {
                 "üíë –û—Ç–Ω–æ—à–µ–Ω–∏—è": "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –∞—Å–ø–µ–∫—Ç–∞—Ö –ª—é–±–æ–≤–Ω—ã—Ö, —Å–µ–º–µ–π–Ω—ã—Ö –∏ –º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.",
                "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–µ—Ç–∏": "–î–∞–π—Ç–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è –¥–µ—Ç–µ–π, —Ä–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –¥–µ—Ç—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.",
                "üí∞ –§–∏–Ω–∞–Ω—Å—ã": "–°–¥–µ–ª–∞–π—Ç–µ –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–æ—Å—Ç–µ.",
                "üßò –ó–¥–æ—Ä–æ–≤—å–µ": "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π—Ç–µ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∏ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.",
                "üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±—É—á–µ–Ω–∏—è, —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π.",
                "üèõ –ë–∏–∑–Ω–µ—Å": "–î–∞–π—Ç–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–∏–∑–Ω–µ—Å-—Ä–µ—à–µ–Ω–∏–π, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞.",
                "üîÆ –û–±—â–µ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ": "–î–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."
            }

            prompt = f"–î–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã {hex_number} '{hex_data[1]}' "
            prompt += f"–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {context_type}. {context_prompts.get(context_type, '')}\n\n"
            if changing_lines:
                prompt += f"–£—á—Ç–∏—Ç–µ –∏–∑–º–µ–Ω—è—é—â–∏–µ—Å—è –ª–∏–Ω–∏–∏: {', '.join(map(str, changing_lines))}.\n"
            prompt += "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç:\n1. –û–±—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)\n2. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)\n3. –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–π (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)\n4. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)"
            max_tokens = 350

        response = client.chat.completions.create(
            model=GPT_MODEL,
            messages=[
                {"role": "system", "content": "–í—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ò-–¶–∑–∏–Ω. –î–∞–π—Ç–µ —Ç–æ—á–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"},
                {"role": "user", "content": prompt}
            ],
            temperature=0.4,
            max_tokens=max_tokens
        )

        interpretation = response.choices[0].message.content

        if interpretation_type == "–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ":
            header = f"üîÆ –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ ({context_type}) –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã {hex_number} ‚Äî {hex_data[1]}:\n\n"
        else:
            header = f"üîÆ –ö—Ä–∞—Ç–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã {hex_number} ‚Äî {hex_data[1]}:\n\n"

        await update.message.reply_text(
            header + interpretation,
            reply_markup=main_menu()
        )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop("interpretation_type", None)
        context.user_data.pop("interpretation_context", None)

        return ConversationHandler.END

    except Exception as e:
        await log_error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu()
        )
        return ConversationHandler.END

async def handle_unrecognized(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if context.user_data.get("awaiting_confirmation", False):
        await divination_command(update, context)
        return

    user = update.effective_user
    user_text = update.message.text
    await log_user_action(user.id, user.username, user.full_name, "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", user_text)
    reply = await generate_fallback_reply(user_text)
    await update.message.reply_text(reply, reply_markup=main_menu())

async def generate_advice(question: str, context: ContextTypes.DEFAULT_TYPE):
    if contains_stop_words(question):
        await log_user_action(context.user_data.get("user_id", 0), 
                            context.user_data.get("username", ""), 
                            context.user_data.get("full_name", ""), 
                            "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ç–æ–ø-—Å–ª–æ–≤–∞", question)
        return get_stop_word_response()

    hex_num, changing_lines, _ = generate_hexagram()
    hex_data = HEXAGRAMS.get(hex_num, ["", ""])

    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n"
        f"¬´{question}¬ª\n\n"
        f"*–°–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç*:\n"
        f"–ì–µ–∫—Å–∞–≥—Ä–∞–º–º–∞ {hex_num}: {hex_data[1]}\n"
        f"{'–ò–∑–º–µ–Ω—è—é—â–∏–µ—Å—è –ª–∏–Ω–∏–∏: ' + ', '.join(map(str, changing_lines)) if changing_lines else ''}\n\n"
        f"–î–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç (2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —É–ø–æ–º–∏–Ω–∞—è –Ω–æ–º–µ—Ä –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∏–∑–º–µ–Ω—è—é—â–∏–µ—Å—è –ª–∏–Ω–∏–∏ (–µ—Å–ª–∏ –±—É–¥—É—Ç)."
    )

    try:
        response = client.chat.completions.create(
            model=GPT_MODEL,
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –º–µ–Ω—Ç–æ—Ä Silicon Valley, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –º–µ—Ç–æ–¥–∞–º–∏ design thinking. –¢–≤–æ–∏ —Å–æ–≤–µ—Ç—ã ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–µ–π—Å—ã –∏ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5,
            max_tokens=150
        )
        advice = response.choices[0].message.content
        context.user_data["question_count"] = context.user_data.get("question_count", 0) + 1

        await log_user_action(
            context.user_data.get("user_id", 0), 
            context.user_data.get("username", ""), 
            context.user_data.get("full_name", ""), 
            "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–æ–≤–µ—Ç", 
            f"–í–æ–ø—Ä–æ—Å: {question}\n–ì–µ–∫—Å–∞–≥—Ä–∞–º–º–∞: {hex_num} {hex_data[1]}\n–°–æ–≤–µ—Ç: {advice}"
        )
        return advice
    except Exception as e:
        await log_error(f"–û—à–∏–±–∫–∞ GPT –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–∞: {str(e)}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def generate_fallback_reply(user_text: str):
    try:
        response = client.chat.completions.create(
            model=GPT_MODEL,
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤—ã–π, –º—É–¥—Ä—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫."},
                {"role": "user", "content": user_text}
            ],
            temperature=0.7,
            max_tokens=100
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        await log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        return "–Ø —Ç–µ–±—è –ø–æ–Ω—è–ª. –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ."

def main():
    try:
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("stats", show_stats))
        app.add_handler(MessageHandler(filters.Regex(r"^(–°—Ç–∞—Ä—Ç|Start)$"), start_command))
        app.add_handler(MessageHandler(filters.Regex(r"^(–í—ã–π—Ç–∏|Exit)$"), exit_command))
        app.add_handler(MessageHandler(filters.Regex(r"^(–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –ò-–¶–∑–∏–Ω|Divination)$"), divination_command))
        app.add_handler(MessageHandler(filters.Regex(r"^(–ò–Ω—Ñ–æ|Info)$"), info_command))
        app.add_handler(CallbackQueryHandler(handle_rating, pattern="^rate_"))
        app.add_handler(MessageHandler(filters.Regex(r"^English version ‚û°Ô∏è$"), 
             lambda update, context: update.message.reply_text(
                 "For English version, please visit @TaoDronBot",
                 reply_markup=main_menu()
             )))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –≥–µ–∫—Å–∞–≥—Ä–∞–º–º
        hex_interpretation_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex(r"^–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—ã$"), start_hexagram_interpretation)],
    states={
        HEXAGRAM_INTERPRETATION: [
            MessageHandler(
                filters.TEXT & ~filters.COMMAND & ~filters.Regex(r"^(–ö—Ä–∞—Ç–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ|–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ)$") & 
                ~filters.Regex(r"^(üíë –û—Ç–Ω–æ—à–µ–Ω–∏—è|üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–µ—Ç–∏|üí∞ –§–∏–Ω–∞–Ω—Å—ã|üßò –ó–¥–æ—Ä–æ–≤—å–µ|üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ|üèõ –ë–∏–∑–Ω–µ—Å|üîÆ –û–±—â–µ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ)$"),
                process_hexagram_input
            ),
            MessageHandler(
                filters.Regex(r"^(–ö—Ä–∞—Ç–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ|–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ)$"),
                handle_interpretation_choice
            ),
            MessageHandler(
                filters.Regex(r"^(üíë –û—Ç–Ω–æ—à–µ–Ω–∏—è|üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–µ—Ç–∏|üí∞ –§–∏–Ω–∞–Ω—Å—ã|üßò –ó–¥–æ—Ä–æ–≤—å–µ|üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ|üèõ –ë–∏–∑–Ω–µ—Å|üîÆ –û–±—â–µ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ)$"),
                handle_context_choice
            )
        ],
    },
    fallbacks=[
        CommandHandler("cancel", cancel),
        MessageHandler(filters.ALL, timeout_handler)
    ],
    conversation_timeout=300
)

        app.add_handler(hex_interpretation_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        ready_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex(r"^(–ì–æ—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å|Ready question)$"), ready_question)],
            states={
                FORMULATE_PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_ready_question)],
            },
            fallbacks=[
                CommandHandler("cancel", cancel),
                MessageHandler(filters.ALL, timeout_handler)
            ],
            conversation_timeout=300
        )
        app.add_handler(ready_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞
        help_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex(r"^(–ü–æ–º–æ—á—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å|Help)$"), start_help)],
            states={
                FORMULATE_PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, formulate_problem)],
                CONFIRM_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_question)]
            },
            fallbacks=[CommandHandler("cancel", cancel)],
            conversation_timeout=300
        )
        app.add_handler(help_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unrecognized))

        app.run_polling()
    except Exception as e:
        with open(ERROR_LOG_FILE, 'a', encoding='utf-8') as f:
            f.write(f"{datetime.now().isoformat()} - –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}\n")
        raise

if __name__ == "__main__":
    main()